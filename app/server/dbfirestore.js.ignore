import express from 'express';
import bodyParser from 'body-parser';
import multer from 'multer';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import bcrypt from 'bcrypt';
import session from 'express-session';
import { db } from './firebaseConfig.js';

const app = express();
const port = 3000; // Change to your desired port

// Middleware
app.use(bodyParser.json());
app.use(session({
  secret: 'xxas23%##$&gh12345', // Change this to a secure random key
  resave: false,
  saveUninitialized: false
}));
app.use('/uploads', express.static('uploads'));

// Check if user exists by email
app.get('/users/check/email', async (req, res) => {
  const { email } = req.query;
  try {
    console.log('Checking if user exists for email:', email);
    const userSnapshot = await db.collection('users').where('email', '==', email).get();
    const userExists = !userSnapshot.empty;

    if (userExists) {
      const userId = userSnapshot.docs[0].id;
      req.session.userId = userId;
    }

    res.json({ emailExists: userExists });
  } catch (error) {
    console.error('Error checking if user exists:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Validate user password
app.get('/users/check/password', async (req, res) => {
  const { email, password } = req.query;
  try {
    const userSnapshot = await db.collection('users').where('email', '==', email).get();

    if (userSnapshot.empty) {
      res.json({ passwordMatch: false, message: 'User not found' });
      return;
    }

    const user = userSnapshot.docs[0].data();
    const isPasswordMatch = await bcrypt.compare(password, user.password);

    res.json({ passwordMatch: isPasswordMatch });
  } catch (error) {
    console.error('Error validating user password:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Retrieve all books
app.get('/booksList', async (req, res) => {
  try {
    const booksSnapshot = await db.collection('books').get();
    const books = booksSnapshot.docs.map(doc => doc.data());
    res.json(books);
  } catch (error) {
    console.error('Error retrieving books:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Save new user
app.post('/signup', async (req, res) => {
  const { firstName, lastName, email, password, address, state, zipcode, country } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    await db.collection('users').add({
      firstName,
      lastName,
      email,
      password: hashedPassword,
      address,
      state,
      zipcode,
      country
    });
    res.json({ message: 'User created successfully' });
  } catch (error) {
    console.error('Error saving user:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

const upload = multer({
  storage: multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
      const extension = path.extname(file.originalname);
      cb(null, uuidv4() + extension);
    },
  }),
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed!'), false);
    }
  },
  limits: { fileSize: 10 * 1024 * 1024 }, // 10 MB limit
});

// Add Books
app.post('/books/add', upload.single('image'), async (req, res) => {
  if (!req.file) {
    return res.status(400).json({ error: 'No file uploaded' });
  }

  const { title, author, genre, condition, grade } = req.body;
  const imageUri = req.file ? req.file.path : null;
  const donated_by = req.session.userId;

  if (!donated_by) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    await db.collection('books').add({
      title,
      author,
      genre,
      condition,
      donated_by,
      grade,
      picturePath: imageUri
    });
    res.json({ message: 'Book added successfully' });
  } catch (error) {
    console.error('Error adding book:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Search Books
app.get('/books/search', async (req, res) => {
  const { searchParam, value } = req.query;
  try {
    let booksSnapshot;
    if (searchParam === 'zipcode') {
      booksSnapshot = await db.collection('books').where('zipcode', '==', value).get();
    } else if (searchParam === 'grade') {
      booksSnapshot = await db.collection('books').where('grade', '==', value).get();
    } else {
      return res.status(400).json({ error: 'Invalid search parameter. Use either "zipcode" or "grade".' });
    }

    const books = booksSnapshot.docs.map(doc => doc.data());
    res.json(books);
  } catch (error) {
    console.error('Error searching books:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
